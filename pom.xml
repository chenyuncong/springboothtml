<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>springboothtml</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>springboothtml</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<app.version>0.1</app.version>
		<java.version>1.8</java.version>
		<spring-native.version>0.10.0-SNAPSHOT</spring-native.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>org.springframework.experimental</groupId>-->
<!--			<artifactId>spring-native</artifactId>-->
<!--			<version>${spring-native.version}</version>-->
<!--		</dependency>-->

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/net.sf.cssbox/cssbox -->
<!--		<dependency>-->
<!--			<groupId>net.sf.cssbox</groupId>-->
<!--			<artifactId>cssbox</artifactId>-->
<!--			<version>5.0.0</version>-->
<!--		</dependency>-->

<!--		<dependency>-->
<!--			<groupId>org.seleniumhq.selenium</groupId>-->
<!--			<artifactId>selenium-java</artifactId>-->
<!--			<version>3.141.59</version>-->
<!--		</dependency>-->

		<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-chrome-driver -->
<!--		<dependency>-->
<!--			<groupId>org.seleniumhq.selenium</groupId>-->
<!--			<artifactId>selenium-chrome-driver</artifactId>-->
<!--			<version>3.141.59</version>-->
<!--		</dependency>-->


<!--		<dependency>-->
<!--			<groupId>org.seleniumhq.selenium</groupId>-->
<!--			<artifactId>selenium-api</artifactId>-->
<!--			<version>3.141.59</version>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>net.sourceforge.htmlunit</groupId>-->
<!--			<artifactId>htmlunit</artifactId>-->
<!--			<version>2.30</version>-->
<!--		</dependency>-->

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
					<image>
						<builder>paketobuildpacks/builder:tiny</builder>
						<env>
							<BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
						</env>
					</image>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>build-image</id>
						<!--这里将插件绑定在package这个操作上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build-->
						<phase>package</phase>
						<goals>
							<goal>build</goal>
							<!--<goal>push</goal>-->
						</goals>
					</execution>

					<execution>
						<id>tag-image</id>
						<phase>package</phase>
						<goals>
							<goal>tag</goal>
							<goal>push</goal>
						</goals>
						<configuration>
							<image>${artifactId}-${app.version}:latest</image>
							<newName>192.168.56.119/library/${artifactId}:${app.version}</newName>
							<imageName>192.168.56.119/library/${artifactId}:${app.version}</imageName>
						</configuration>
					</execution>

				</executions>
				<configuration>
					<imageName>${artifactId}-${app.version}</imageName>
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<serverId>my-docker-registry</serverId> <!-- 在maven中设置的账号密码，对应的服务id -->
					<resources>
						<rescource> <!-- 将打包文件放入dockerDirectory指定的位置 -->
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${artifactId}-${app.version}.jar</include>
						</rescource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
		</pluginRepository>
	</pluginRepositories>

</project>
